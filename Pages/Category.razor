@page "/categories"
@using HappyNoodles_ManagementApp.ViewModels.Category
@using HappyNoodles_ManagementApp.ViewModels.Menu
@inject IHttpClientFactory HttpClientFactory

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">
    <MudText Typo="Typo.h3" GutterBottom="true">Categories</MudText>
    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@OpenAddCategoryModal">Add Category</MudButton>

    @if (categories == null)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else if (!categories.Any())
    {
        <MudAlert Severity="Severity.Info">No categories found.</MudAlert>
    }
    else
    {
        <MudPaper Elevation="3" Class="pa-4">
            <MudTable Items="@categories" Dense="true" Hover="true" Bordered="true" Striped="true">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Categories</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>Category Name</MudTh>
                    <MudTh>Menu</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ID">@context.Id</MudTd>
                    <MudTd DataLabel="Category Name">@context.Name</MudTd>
                    <MudTd DataLabel="Menu">@context.Menu.Name</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudPaper>
    }

    @if ((categories != null) && _isModalOpen)
    {
        <div class="modal-overlay">
            <div class="modal">
                <div class="modal-header">
                    <MudText Typo="Typo.h6">Add New Category</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="@CloseModal" />
                </div>
                <div class="modal-body">
                    <MudTextField @bind-Value="_newCategory.Name" Label="Category Name" Required="true" />
                    <MudSelect T="Guid" Label="Select Menu" @bind-Value="_newCategory.Menu.Id">
                        @foreach (var menu in _menus)
                        {
                            <MudSelectItem T="Guid" Value="@menu.Id">@menu.Name</MudSelectItem>
                        }
                    </MudSelect>
                </div>
                <div class="modal-footer">
                    <MudButton OnClick="SubmitNewCategory" Color="Color.Primary">Submit</MudButton>
                    <MudButton OnClick="CloseModal" Color="Color.Secondary">Cancel</MudButton>
                </div>
            </div>
        </div>
    }
</MudContainer>

@code {
    private List<CategoryViewModel> categories;
    private List<MenuViewModel> _menus;
    private CategoryViewModel _newCategory = new();
    private HttpClient _httpClient;
    private bool _isModalOpen = false;
    private string searchString = "";

    protected override async Task OnInitializedAsync()
    {
        _httpClient = HttpClientFactory.CreateClient("ApiClient");
        await LoadCategories();
        await LoadMenus();
    }

    private async Task LoadCategories()
    {
        categories = await _httpClient.GetFromJsonAsync<List<CategoryViewModel>>("api/categories");
    }

    private async Task LoadMenus()
    {
        _menus = await _httpClient.GetFromJsonAsync<List<MenuViewModel>>("api/menus");
    }

    private void OpenAddCategoryModal()
    {
        _isModalOpen = true;
    }

    private void CloseModal()
    {
        _isModalOpen = false;
        _newCategory = new CategoryViewModel(); // Reset form
    }

    private async Task SubmitNewCategory()
    {
        await _httpClient.PostAsJsonAsync("api/categories", _newCategory);
        await LoadCategories();
        CloseModal();
    }

    private bool FilterFunc(CategoryViewModel category)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (category.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (category.Menu.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
