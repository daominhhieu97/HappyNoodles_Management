@page "/menus"
@using HappyNoodles_ManagementWebApp.Models
@inject IHttpClientFactory HttpClientFactory

<h3>Menu Management</h3>

<!-- Add Menu Form -->
@if (!isEditing)
{
    <div>
        <h4>Add New Menu</h4>
        <EditForm Model="newMenu" OnValidSubmit="AddMenu" @ref="addMenuForm" formName="addNewMenu">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="menuName" class="form-label">Menu Name</label>
                <InputText id="menuName" class="form-control" @bind-Value="newMenu.Name" />
                <ValidationMessage For="@(() => newMenu.Name)" />
            </div>

            <button type="submit" class="btn btn-primary">Add Menu</button>
        </EditForm>
    </div>
}

<!-- Edit Menu Form -->
@* @if (isEditing)
{
    <div>
        <h4>Edit Menu</h4>
        <EditForm Model="editingMenu" OnValidSubmit="UpdateMenu" @ref="editMenuForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="editMenuName" class="form-label">Menu Name</label>
                <InputText id="editMenuName" class="form-control" @bind-Value="editingMenu.Name" />
                <ValidationMessage For="@(() => editingMenu.Name)" />
            </div>

            <button type="submit" class="btn btn-primary">Update Menu</button>
            <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
        </EditForm>
    </div>
} *@

<!-- Menu List -->
<div>
    <h4>Menus</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var menu in Menus)
            {
                <tr>
                    <td>@menu.Name</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => EditMenu(menu)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteMenu(menu.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<Menu> Menus = new List<Menu>();
    private Menu newMenu = new Menu();
    private bool isEditing = false;
    private Menu editingMenu;
    private HttpClient Http;
    private EditForm addMenuForm;
    private EditForm editMenuForm;

    protected override async Task OnInitializedAsync()
    {
        Http = HttpClientFactory.CreateClient("ApiClient");
        Menus = await Http.GetFromJsonAsync<List<Menu>>("api/menus");
    }

    private async Task AddMenu()
    {
        var response = await Http.PostAsJsonAsync("api/menus", newMenu);
        if (response.IsSuccessStatusCode)
        {
            Menus = await Http.GetFromJsonAsync<List<Menu>>("api/menus");
            newMenu = new Menu();
            //addMenuForm.Reset();
        }
    }

    private void EditMenu(Menu menu)
    {
        isEditing = true;
        editingMenu = new Menu
        {
            Id = menu.Id,
            Name = menu.Name
        };
    }

    private async Task UpdateMenu()
    {
        var response = await Http.PutAsJsonAsync($"api/menus/{editingMenu.Id}", editingMenu);
        if (response.IsSuccessStatusCode)
        {
            Menus = await Http.GetFromJsonAsync<List<Menu>>("api/menus");
            isEditing = false;
            editingMenu = null;
            //editMenuForm.Reset();
        }
    }

    private async Task DeleteMenu(int id)
    {
        var response = await Http.DeleteAsync($"api/menus/{id}");
        if (response.IsSuccessStatusCode)
        {
            Menus = await Http.GetFromJsonAsync<List<Menu>>("api/menus");
        }
    }

    private void CancelEdit()
    {
        isEditing = false;
        editingMenu = null;
        //editMenuForm.Reset();
    }
}
